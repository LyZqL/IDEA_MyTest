<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--命名空间绑定DAO全类名-->
<mapper namespace="com.mytest.dao.employee.EmployeeDao">


    <!--自定义某个javaBean的封装规则
    type：自定义规则的Java类型
    id:唯一id方便引用
      -->
    <resultMap type="com.mytest.pojo.employee.Employee" id="MySimpleEmp">
        <!--指定主键列的封装规则
        id定义主键会底层有优化；
        column：指定哪一列
        property：指定对应的javaBean属性
          -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <!-- resultMap:自定义结果集映射规则;与resultType只能二选一  -->
    <!-- public Employee getEmpByLastname(String lastName); -->
    <select id="getEmpByLastname" resultMap="MySimpleEmp">
		select * from tbl_employee where last_name=#{lastName} limit 1
	</select>


    <!-- public Employee getEmpById(Integer id); -->
    <select id="getEmpById" resultType="com.mytest.pojo.employee.Employee">
		select * from tbl_employee where id=#{id}
	</select>


    <!--resultType：如果返回的是一个集合，要写集合中元素的类型  -->
    <!--public List<Employee> getEmps();  -->
    <select id="getEmps" resultType="com.mytest.pojo.employee.Employee">
		select * from tbl_employee
	</select>


    <!-- public void addEmp(Employee employee); -->
    <!-- parameterType：参数类型，可以省略，
    获取自增主键的值：
        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
        useGeneratedKeys="true"；使用自增主键获取主键值策略;
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性;
        databaseId;指定语句执行环境;
    -->
    <insert id="addEmp" parameterType="com.mytest.pojo.employee.Employee"
            useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
		insert into tbl_employee(last_name,email,gender)
		values(#{lastName},#{email},#{gender})
	</insert>

    <!--
    获取非自增主键的值：
        Oracle不支持自增；Oracle使用序列来模拟自增；
        每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
     -->
    <insert id="addEmp" databaseId="oracle">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>

    <!-- public void updateEmp(Employee employee);  -->
    <update id="updateEmp">
		update tbl_employee
		set last_name=#{lastName},email=#{email},gender=#{gender}
		where id=#{id}
	</update>

    <!-- public void deleteEmpById(Integer id); -->
    <delete id="deleteEmpById">
		delete from tbl_employee where id=#{id}
	</delete>

    <!-- public Employee getEmpByMap(Map<String, Object> map); -->
    <!--将参数封装成map,然后使用#{key}：取出map中对应的值-->
    <select id="getEmpByMap" resultType="com.mytest.pojo.employee.Employee">
 		select * from ${tableName} where id=${id} and last_name=#{lastName}
 	</select>

    <!--将一条记录封装为map-->
    <!--public Map<String, Object> getEmpByIdReturnMap(Integer id);  -->
    <select id="getEmpByIdReturnMap" resultType="map">
 		select * from tbl_employee where id=#{id}
 	</select>

    <!--将多条记录封装为map<主键,bean>  需要在接口上指定 @MapKey("id")-->
    <!--public Map<Integer, Employee> getEmpByLastNameLikeReturnMap(String lastName);  -->
    <select id="getEmpByLastNameLikeReturnMap" resultType="java.util.Map">
 		select * from tbl_employee where last_name like #{lastName}
 	</select>

    <!--
    场景一：
        查询Employee的同时查询员工对应的部门
        Employee===Department
        一个员工有与之对应的部门信息；
        id  last_name  gender    d_id     did  dept_name (private Department dept;)
     -->
    <!--
        联合查询：级联属性封装结果集
      -->
    <resultMap type="com.mytest.pojo.employee.Employee" id="MyDifEmp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
        <!--级联属性也可以使用以下方式-->
        <!--  association可以指定联合的javaBean对象
        property="dept"：指定哪个属性是联合的对象
        javaType:指定这个属性对象的类型[不能省略]
        -->
        <!--<association property="dept" javaType="Department">
        <id column="did" property="id"/>
        <result column="dept_name" property="departmentName"/>
        </association>-->
    </resultMap>
    <!--  public Employee getEmpAndDept(Integer id);-->
    <select id="getEmpAndDept" resultMap="MyDifEmp">
		SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,
		d.id did,d.dept_name dept_name FROM tbl_employee e,tbl_dept d
		WHERE e.d_id=d.id AND e.id=#{id}
	</select>


    <!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
    <!--  id  last_name  email   gender    d_id   -->
    <!-- 可以使用延迟加载（懒加载）；(按需加载)
        Employee==>Dept：
            我们每次查询Employee对象的时候，都将一起查询出来。
            部门信息在我们使用的时候再去查询；
            分段查询的基础之上加上两个配置(全局配置中设置)：
           <setting name="lazyLoadingEnabled" value="true"/>
            <setting name="aggressiveLazyLoading" value="false"/>
     -->
    <resultMap type="com.mytest.pojo.employee.Employee" id="MyEmpByStep">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法

            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
         -->
        <association property="dept"
                     select="com.mytest.dao.department.DepartmentDao.getDeptById"
                     column="d_id">
        </association>
    </resultMap>
    <!--  public Employee getEmpByIdStep(Integer id);-->
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from tbl_employee where id=#{id}
        <if test="_parameter!=null">
            and 1=1
        </if>
    </select>

    <!--
     场景二：
         查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
      -->
    <!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
    <select id="getEmpsByDeptId" resultType="com.mytest.pojo.employee.Employee">
		select * from tbl_employee where d_id=#{deptId}
	</select>

    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->
    <resultMap type="com.mytest.pojo.employee.Employee" id="MyEmpDis">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
            <case value="0" resultType="com.mytest.pojo.employee.Employee">
                <association property="dept"
                             select="com.mytest.dao.department.DepartmentDao.getDeptById"
                             column="d_id">
                </association>
            </case>
            <!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
            <case value="1" resultType="com.mytest.pojo.employee.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>


</mapper>